
## Workflow: 
## The user will specify a config.yaml input at execution to hold the following variables: 
## An example CLI command would look as follows: 
## 	snakemake --cores $nproc -s /path_to_snakefile/ --configfile path_to_config_yaml/
## users should specify the number of cores desired by replacing $nproc
##
## 	Config arguments
## 	-output_dir: directory where outputs will be held
## 	-lineages: a list of Pangolin lineages to be investigated
##	-subset_number: The number of background/context samples the user wants for each lineage
## 	-gisaid_dir: Directory containing the master Gisaid multi-FASTA and metadata
## 	-master_dir: Directory containing the master PHO multi-FASTA, lineage report, and nextclade analysis
## 	-reference_genome: path to the gb reference genome for ncov used for alignment

## If running snakemake through a conda environment, be sure to install nextstrain: 
## conda activate snakemake && conda install nextstrain


# Specify the desired outputs using all
# if the suer specifies the qc_list parameter, the annotation tree will be generated in pdf form using annotate_tree. If not, the workflow terminates with the tree rule

if config["qc_list"]: 
	rule all: 
		input: 
			gisaid_subset = expand(config["output_dir"] + "{lineages}/" + "gisaid_subset_filtered.fa", lineages = config["lineages"]),
			pho_subset = expand(config["output_dir"] + "{lineages}/" + "pho_subset_filtered.fa", lineages = config["lineages"]),
			merged = expand(config["output_dir"] + "{lineages}/" + "merged.fa", lineages = config["lineages"]),
			gisaid_metadata = expand(config["output_dir"] + "{lineages}/" + "civet_data/" + "gisaid_subset_metadata.csv", lineages = config["lineages"]),
			alignment = expand(config["output_dir"] + "{lineages}/" + "merged_aln.fasta", lineages = config["lineages"]),
			tree = expand(config["output_dir"] + "{lineages}/" + "iqtree.nwk", lineages = config["lineages"]),
			annotations = expand(config["output_dir"] + "{lineages}/" + "{lineages}" + "_phylo_tree.pdf", lineages = config["lineages"])

elif not config["qc_list"]:
	rule all: 
		input: 
			gisaid_subset = expand(config["output_dir"] + "{lineages}/" + "gisaid_subset_filtered.fa", lineages = config["lineages"]),
			pho_subset = expand(config["output_dir"] + "{lineages}/" + "pho_subset_filtered.fa", lineages = config["lineages"]),
			merged = expand(config["output_dir"] + "{lineages}/" + "merged.fa", lineages = config["lineages"]),
			gisaid_metadata = expand(config["output_dir"] + "{lineages}/" + "civet_data/" + "gisaid_subset_metadata.csv", lineages = config["lineages"]),
			alignment = expand(config["output_dir"] + "{lineages}/" + "merged_aln.fasta", lineages = config["lineages"]),
			tree = expand(config["output_dir"] + "{lineages}/" + "iqtree.nwk", lineages = config["lineages"])


# Create lineage subset using a shell script
# use srcdir to specify the location to search for the shell script for create_subsets

rule create_subsets: 
	output: 
		gisaid_subset = config["output_dir"] + "{lineages}/" + "gisaid_subset_filtered.fa",
		pho_subset = config["output_dir"] + "{lineages}/" + "pho_subset_filtered.fa",
		merged = config["output_dir"] + "{lineages}/" + "merged.fa",
		gisaid_metadata = config["output_dir"] + "{lineages}/" + "civet_data/" + "gisaid_subset_metadata.csv"
	params: 
		lineages = "{lineages}",
		dirs = config["output_dir"] + "{lineages}/",
		subset_num = config["subset_number"],
		metadata = config["gisaid_dir"] + "metadata*",
		lineage_report = config["master_dir"] + "lineage_report_all*",
		gisaid_sequences = config["gisaid_dir"] + "sequences.fasta",
		multi_fasta = config["master_dir"] + "complete_all*.fa",
		script = srcdir("make_augur_tree_subset.sh")
		
	shell: 	
		"sh {params.script} -g {params.metadata} \
       		-l {params.lineage_report} \
       		-i {params.lineages} \
       		-o {params.dirs} \
       		-s {params.gisaid_sequences} \
       		-p {params.multi_fasta} \
       		-n {params.subset_num}"

# Create an alignment using MAFFT wrapped in augur (Nextstrain)

rule alignment: 
	input: 
		fasta = config["output_dir"] + "{lineages}/" + "merged.fa",
		ref = config["reference_genome"]
	output: 
		config["output_dir"] + "{lineages}/" + "merged_aln.fasta"

	shell: 
		"augur align \
  		--sequences {input.fasta} \
  		--reference-sequence {input.ref} \
  		--output {output} \
  		--nthreads auto \
  		--fill-gaps"

# Create a tree using iqtree wrapped in augur (Nextstrain)

rule tree: 
	input: 
		config["output_dir"] + "{lineages}/" + "merged_aln.fasta"
	output: 
		config["output_dir"] + "{lineages}/" + "iqtree.nwk"
	shell: 
		"augur tree \
  		--alignment {input} \
  		--output {output} \
  		--nthreads auto"

if config["qc_list"]: 
	rule tree_annotation: 
		input: 
			tree = config["output_dir"] + "{lineages}/" + "iqtree.nwk",
			qc_list = config["qc_list"]

		output: 
			config["output_dir"] + "{lineages}/" + "{lineages}" + "_phylo_tree.pdf"
		params: 
			lineages = "{lineages}",
			annotation_script = srcdir("automate_tree_annotation.R"),
			out_dir = config["output_dir"] + "{lineages}/",
		shell: 
			"export TZ=GMT && Rscript {params.annotation_script} \
 			--input_tree {input.tree} \
			--output_directory {params.out_dir} \
			--lineage_id {params.lineages} \
			--qc_list {input.qc_list}"
	
